// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model (existing)
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String?
  phone       String?
  isAffiliate Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Products (Parent Products Only)
model Product {
  id                Int      @id @default(autoincrement())
  sku              String   @unique
  name             String
  shortDescription String?  @map("short_description") @db.Text
  productDetail    String?  @map("product_detail") @db.Text
  
  // Source Information
  source           String   // 'offline', 'online', 'own'
  brandName        String?  @map("brand_name")
  manufacturerInfo String?  @map("manufacturer_info")
  sourceUrl        String?  @map("source_url") // For scraped products
  
  // Physical Info
  weight           Decimal? @db.Decimal(8,2) // in kg
  sizeChart        String?  @map("size_chart") @db.Text
  
  // Inventory Management
  manageInventory  Boolean  @map("manage_inventory") @default(false)
  
  // SEO
  metaTitle       String?  @map("meta_title")
  metaDescription String?  @map("meta_description") @db.Text
  slug            String?  @unique
  
  // Status
  active          Boolean  @default(true)
  
  // Upload Tracking
  batchId         String?  @map("batch_id")
  
  // Timestamps
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  variants        ProductVariant[]
  categories      ProductCategory[]
  images          ProductImage[]
  attributes      ProductAttribute[]
  tags            ProductTag[]
  
  @@map("products")
}

// Product Variants (All Variants)
model ProductVariant {
  id                 Int      @id @default(autoincrement())
  productId          Int      @map("product_id")
  sku               String   @unique
  name              String
  color             String?
  size              String?
  
  // Stock Management
  quantity          Int      @default(0)
  stockStatus       Boolean  @map("stock_status") @default(true)
  
  // Pricing
  regularPrice      Decimal  @map("regular_price") @db.Decimal(10,2)
  costPrice         Decimal? @map("cost_price") @db.Decimal(10,2)
  onSale            Boolean  @map("on_sale") @default(false)
  salePrice         Decimal? @map("sale_price") @db.Decimal(10,2)
  discountCostPrice Decimal? @map("discount_cost_price") @db.Decimal(10,2)
  
  // Bundle Data (JSON for complex bundle info)
  variantData       Json?    @map("variant_data")
  
  // Status
  active            Boolean  @default(true)
  
  // Timestamps
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_variants")
}

// Categories (Hierarchical)
model Category {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String   @unique
  parentId   Int?     @map("parent_id")
  level      Int      @default(0)
  sortOrder  Int      @map("sort_order") @default(0)
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Self-referential relationship
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  
  // Product relationships
  products   ProductCategory[]
  
  @@map("categories")
}

// Product Categories Junction Table
model ProductCategory {
  id         Int     @id @default(autoincrement())
  productId  Int     @map("product_id")
  categoryId Int     @map("category_id")
  
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([productId, categoryId])
  @@map("product_categories")
}

// Product Images
model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  imageUrl  String  @map("image_url")
  altText   String? @map("alt_text")
  sortOrder Int     @map("sort_order") @default(0)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

// Product Attributes (Flexible Key-Value)
model ProductAttribute {
  id             Int     @id @default(autoincrement())
  productId      Int     @map("product_id")
  attributeName  String  @map("attribute_name")
  attributeValue String  @map("attribute_value")
  
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_attributes")
}

// Product Tags
model ProductTag {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  tagName   String  @map("tag_name")
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_tags")
}

// Upload Batches (For tracking and rollback)
model UploadBatch {
  id            Int       @id @default(autoincrement())
  filename      String
  uploadedBy    String    @map("uploaded_by")
  status        String    // 'processing', 'completed', 'failed'
  totalRows     Int       @map("total_rows")
  processedRows Int       @map("processed_rows") @default(0)
  successRows   Int       @map("success_rows") @default(0)
  errorRows     Int       @map("error_rows") @default(0)
  errorLog      Json?     @map("error_log")
  
  createdAt     DateTime  @default(now()) @map("created_at")
  completedAt   DateTime? @map("completed_at")
  
  @@map("upload_batches")
}